start=omega, theta=theta,  verb=0, nef=TRUE, wtol=wtol, tmax=20)
}else{
Wfit <- omega;
}}
if(light==0){
Wfit <- omega;
}
## sequential quadratic programming for conditional Y solution
#     if(admix && wtol > 0 && (iter-1)%%nbundles==0)
##if(admix && wtol > 0)
#      { Wfit <- tpxweights(n=nrow(Xmod), p=ncol(X), xvo=xvo, wrd=wrd, doc=doc,
#        start=omega, theta=theta,  verb=0, nef=TRUE, wtol=wtol, tmax=20) }else{ Wfit <- omega }
#    move2 <- tpxEM(X=X, m=m, theta=theta, omega=Wfit, alpha=alpha, admix=admix,
#                   method_admix=1, grp=grp)
## squarem acceleration
if(use_squarem){
Wfit <- normalizetpx(Wfit + 1e-15, byrow=TRUE);
theta <- normalizetpx(theta + 1e-15, byrow=FALSE);
param_vec_in <- c(as.vector(logit(Wfit)),as.vector(logit(theta)));
#  param_vec_in <- c(as.vector(omega),as.vector(theta));
res <- squarem(par=as.numeric(param_vec_in),
fixptfn=tpxsquarEM,
objfn= tpxlpost_squarem,
X=X,
m=m,
K=K,
alpha=alpha,
admix=admix,
method_admix=method_admix,
grp=grp,
control=list(maxiter = 5, trace = FALSE, square=TRUE, tol=1e-10));
res_omega <- inv.logit(matrix(res$par[1:(nrow(X)*K)], nrow=nrow(X), ncol=K));
#  res_omega <- matrix(res$par[1:(nrow(X)*K)], nrow=nrow(X), ncol=K);
res_theta <- inv.logit(matrix(res$par[-(1:(nrow(X)*K))], nrow=ncol(X), ncol=K));
#  res_theta <- matrix(res$par[-(1:(nrow(X)*K))], nrow=ncol(X), ncol=K);
move <- list("omega"=res_omega, "theta"=res_theta);
QNup <- list("omega"=move$omega, "theta"=move$theta, "L"=res$value.objfn, "Y"=NULL)
if(type=="independent"){
out <-  tpxThetaGroupInd(QNup$theta, signatures)
QNup$theta <-out$theta;
}
}
if(!use_squarem){
## joint parameter EM update
Wfit <- normalizetpx(Wfit + 1e-15, byrow=TRUE);
theta <- normalizetpx(theta + 1e-15, byrow=FALSE);
move <- tpxEM(X=X, m=m, theta=theta, omega=Wfit, alpha=alpha, admix=admix,
method_admix=method_admix, grp=grp)
#  L_new <- tpxlpost(X=X, theta=move$theta, omega=move$omega, alpha=alpha, admix=admix, grp=grp)
#  QNup <- list("move"=move, "L"=L_new, "Y"=NULL)
## quasinewton-newton acceleration
QNup <- tpxQN(move=move, Y=Y, X=X, alpha=alpha, verb=verb, admix=admix, grp=grp, doqn=qn-dif)
if(type=="independent"){
out <-  tpxThetaGroupInd(move$theta, signatures)
move$theta <-out$theta;
}
move <- QNup$move
Y <- QNup$Y
}
if(QNup$L < L){  # happens on bad Wfit, so fully reverse
if(verb > 10){ cat("_reversing a step_") }
move <- tpxEM(X=X, m=m, theta=theta, omega=omega, alpha=alpha, admix=admix,
method_admix=method_admix,grp=grp)
if(type=="independent"){
out <-  tpxThetaGroupInd(move$theta, signatures)
move$theta <-out$theta;
}
QNup$L <-  tpxlpost(X=X, theta=move$theta, omega=move$omega, alpha=alpha, admix=admix, grp=grp) }
## calculate dif
dif <- (QNup$L-L)
L <- QNup$L
## check convergence
if(abs(dif) < tol){
if(sum(abs(theta-move$theta)) < tol){ update = FALSE } }
## print
if(verb>0 && (iter-1)%%ceiling(10/verb)==0 && iter>0){
##if(verb>0 && iter>0){
cat( paste( round(dif,digits), #" (", sum(abs(theta-move$theta)),")",
", ", sep="") ) }
## heartbeat for long jobs
if(((iter+1)%%1000)==0){
cat(sprintf("p %d iter %d diff %g\n",
nrow(theta), iter+1,round(dif))) }
## iterate
iter <- iter+1
theta <- move$theta
omega <- move$omega
}
## final log posterior
L <- tpxlpost(X=X, theta=theta, omega=omega, alpha=alpha, admix=admix, grp=grp)
## summary print
if(verb>0){
cat("done.")
if(verb>1) { cat(paste(" (L = ", round(L,digits), ")", sep="")) }
cat("\n")
}
iter
system.time(omega <- tpxweights(n=n, p=p, xvo=xvo, wrd=wrd, doc=doc, start=tpxOmegaStart(X,theta), theta=theta))
omega
theta
theta <- notmalizetpc
theta <- notmalizetpx(theta + 1e-20)
theta <- normalizetpx(theta + 1e-20, byrow = FALSE)
dim(theta)
theta
system.time(omega <- tpxweights(n=n, p=p, xvo=xvo, wrd=wrd, doc=doc, start=tpxOmegaStart(X,theta), theta=theta))
omega
initopics_prev <- initopics
theta <- initopics_prev
new_theta <- matrix(0, dim(theta)[1], dim(theta)[2])
sig_list <- list()
k <- 1
num_unique_sigs <- list()
for(l in 1:dim(signatures)[2]){
sig_list[[l]] <- tapply(theta[,k], factor(signatures[,l], levels=unique(signatures[,l])), sum)
num_unique_sigs[[l]] <- 0:(length(unique(signatures[,l]))-1)
# num_unique_sigs[[l]] <- 0:(max(signatures[,l])-1)
if(l==1){
f_array <- sig_list[[l]]
}else{
f_array <- outer(f_array, sig_list[[l]])
}
}
f_array
dim(f_array)
sig_list[[l]]
num_unique_sigs <- list()
for(l in 1:dim(signatures)[2]){
sig_list[[l]] <- tapply(theta[,k], factor(signatures[,l], levels=unique(signatures[,l])), sum)
num_unique_sigs[[l]] <- 0:(length(unique(signatures[,l]))-1)
# num_unique_sigs[[l]] <- 0:(max(signatures[,l])-1)
if(l==1){
f_array <- sig_list[[l]]
}else{
f_array <- outer(f_array, sig_list[[l]])
}
}
f_array
signature_new <- as.numeric();
vec <- numeric()
grid <- expand.grid(num_unique_sigs)
grid
match(data.frame(t(signatures)), data.frame(t(grid)))
num_unique_sigs
grid <- expand.grid(num_unique_sigs)
dim(grid)
indices <- which(is.na(match(data.frame(t(signatures)), data.frame(t(grid)))))
indices
length(indices)
grid[16258,]
signatures[16258,]
num_unique_sigs
signatures[16258,]
dim(signatures)
grid <- expand.grid(num_unique_sigs)
dim(grid)
indices <- which(is.na(match(data.frame(signatures), data.frame(grid))))
length(indices)
indices
indices <- which(is.na(match(t(signatures), t(grid))))
indices
match(t(signatures), t(grid))
match(data.frame(t(signatures)), data.frame(t(grid)))
table(signatures[,1])
table(signatures[,2])
table(signatures[,3])
table(signatures[,4])
table(signatures[,5])
table(signatures[,6])
table(grid[,1])
table(grid[,2])
table(grid[,3])
table(grid[,4])
table(grid[,5])
table(grid[,6])
install.packages("compare")
library(compare)
library(compare)
out <- compare(signatures, grid)
dim(out)
out
a1 <- data.frame(a = 1:5, b = letters[1:5])
a2 <- data.frame(a = 1:3, b = letters[1:3])
a1
a2
comparison <- compare(a1,a2,allowAll=TRUE)
comparison$tM
out <- compare(signatures, grid, allowAll = TRUE)
out$tM
out$tM[1:5,]
out <- compare(data.frame(signatures), data.frame(grid), allowAll = TRUE)
out
out$tM
dim(out$tM)
dim(signatures)
comparison$tC
out$transform
out$result
out$tC
tail(out$tC)
out$tM
a1.vec <- apply(signatures, 1, paste, collapse = "")
a2.vec <- apply(grid, 1, paste, collapse = "")
a1.vec
a2.vec
index1 <- !a1.vec %in% a2.vec
index1
which(index1)
which(index1==TRUE)
index1 <- a1.vec %in% a2.vec
index1
index1 <- match(a1.vec, a2.vec)
index1
length(index1)
max(index1)
length(vec)
vec <- apply(grid, 1, function(x) return(f_array[matrix(as.numeric(x)+1,1)]))
length(vec)
vec[index1]/(sum(ve[index1]))
vec[index1]/(sum(vec[index1]))
sum(vec[index1]/(sum(vec[index1])))
source('~/Documents/maptpx/R/tpx.R')
source('~/Documents/maptpx/R/tpx.R')
source('~/Documents/maptpx/R/topics.R')
out <- topics(HGDPmoderns_clubbed, K=2, type="independent", signatures = signature_pos)
dim(out$theta)
omega <- out$omega
labs <- rep("hgdp", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
omega <- out$omega
labs <- rep("hgdp", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
omega
out <- topics(HGDPmoderns_clubbed, K=2, type="full", signatures = signature_pos)
out$omega
setwd("~/Documents/ancient-damage/R")
gosling_data <- get(load("../processed_data/annagosling2016-counts-table.rda"))
dim(gosling_data)
gossling_data_clubbed <- club_signature_counts(gossling_data)
library(aRchaic)
gossling_data_clubbed <- club_signature_counts(gossling_data)
gossling_data <- get(load("../processed_data/annagosling2016-counts-table.rda"))
gossling_data_clubbed <- club_signature_counts(gossling_data)
dim(gossling_data_clubbed)
gossling_data_clubbed <- gossling_data_clubbed[-28,];
dim(gossling_data_clubbed)
names <- rownames(gossling_data_clubbed);
control_indices <- c(grep("EXN", names), grep("Libneg", names), grep("PCRneg", names))
labs <- character();
labs <- rep("ancient", dim(gossling_data_clubbed)[1])
labs[control_indices] <- "controls"
lab
labs
which(labs == "ancient")
length(which(labs == "ancient"))
indices <- which(labs == "ancient")
indices
gossling_ancients <- gossling_data_clubbed[indices, ]
dim(gossling_ancients)
metadata <- read.table("../data/Gosling_metadata/metadata.csv")
metadata <- read.csv("../data/Gosling_metadata/metadata.csv")
metadata
metadata <- get(load("../data/Gosling_metadata/metadata_ordered.rda"))
metadata
gossling_data[1:5,1:5]
topic_clus <- maptpx::topics(gossling_ancients, K=2, tol=10, type="independent")
signature_set <- colnames(gossling_ancients)
sig_split <- t(sapply(1:length(signature_set), function(x) return(strsplit(signature_set[x], "")[[1]])))
new_sig_split <- matrix(0, dim(sig_split)[1], 5);
new_sig_split[,1] <- sig_split[,1]
new_sig_split[,2] <- sig_split[,2]
new_sig_split[,3] <- sapply(1:length(signature_set), function(x) return(paste(sig_split[x,3:6], collapse="")))
new_sig_split[,4] <- sig_split[,7]
new_sig_split[,5] <- sig_split[,8]
levels(new_sig_split[,1]) <- c("0", "1", "2", "3", "4")
mat <- matrix(0, dim(new_sig_split)[1], dim(new_sig_split)[2])
for(k in 1:dim(new_sig_split)[2]){
temp <- as.factor(new_sig_split[,k])
mat[,k] <- as.numeric(as.matrix(plyr::mapvalues(temp, from = levels(temp), to = 0:(length(levels(temp))-1))))
}
signatures <- mat;
sig_split
dim(sig_split)
sig_split[1]
signature_set <- colnames(gossling_ancients)
sig_split <- t(sapply(1:length(signature_set), function(x) return(strsplit(signature_set[x], "")[[1]][1:8])))
new_sig_split <- matrix(0, dim(sig_split)[1], 5);
new_sig_split[,1] <- sig_split[,1]
new_sig_split[,2] <- sig_split[,2]
new_sig_split[,3] <- sapply(1:length(signature_set), function(x) return(paste(sig_split[x,3:6], collapse="")))
new_sig_split[,4] <- sig_split[,7]
new_sig_split[,5] <- sig_split[,8]
new_sig_split
signature_set <- colnames(gossling_ancients)
sig_split <- t(sapply(1:length(signature_set), function(x) return(strsplit(signature_set[x], "")[[1]][1:8])))
new_sig_split <- matrix(0, dim(sig_split)[1], 5);
new_sig_split[,1] <- sig_split[,1]
new_sig_split[,2] <- sig_split[,2]
new_sig_split[,3] <- sapply(1:length(signature_set), function(x) return(paste(sig_split[x,3:6], collapse="")))
new_sig_split[,4] <- sig_split[,7]
new_sig_split[,5] <- sig_split[,8]
levels(new_sig_split[,1]) <- c("0", "1", "2", "3", "4")
mat <- matrix(0, dim(new_sig_split)[1], dim(new_sig_split)[2])
for(k in 1:dim(new_sig_split)[2]){
temp <- as.factor(new_sig_split[,k])
mat[,k] <- as.numeric(as.matrix(plyr::mapvalues(temp, from = levels(temp), to = 0:(length(levels(temp))-1))))
}
signatures <- mat;
signatures
signatures[,3]
signature_set <- colnames(gossling_ancients)
sig_split <- t(sapply(1:length(signature_set), function(x) return(strsplit(signature_set[x], "")[[1]][1:8])))
new_sig_split <- matrix(0, dim(sig_split)[1], 5);
new_sig_split[,1] <- sig_split[,1]
new_sig_split[,2] <- sig_split[,2]
new_sig_split[,3] <- sapply(1:length(signature_set), function(x) return(paste(sig_split[x,3:6], collapse="")))
new_sig_split[,4] <- sig_split[,7]
new_sig_split[,5] <- sig_split[,8]
levels(new_sig_split[,1]) <- c("0", "1", "2", "3", "4")
pos <- t(sapply(1:length(signature_set), function(x)
{
y = strsplit(signature_set[x], "")[[1]]
return(paste(y[10:length(y)], collapse=""))
}))
mat <- matrix(0, dim(new_sig_split)[1], dim(new_sig_split)[2])
for(k in 1:dim(new_sig_split)[2]){
temp <- as.factor(new_sig_split[,k])
mat[,k] <- as.numeric(as.matrix(plyr::mapvalues(temp, from = levels(temp), to = 0:(length(levels(temp))-1))))
}
pos <- as.numeric(pos)
pos <- pos - min(pos)
pos <- factor(pos, levels = 0:22)
pos
signatures <- mat;
signature_pos <- cbind.data.frame(signatures, pos)
topic_clus <- maptpx::topics(gossling_ancients, K=2, tol=10, type="independent", signatures = signature_pos)
devtools::install_github("kkdey/maptpx")
library(maptpx)
topic_clus <- maptpx::topics(gossling_ancients, K=2, tol=10, type="independent", signatures = signature_pos)
source('~/Documents/maptpx/R/count.R')
source('~/Documents/maptpx/R/tpx.R')
source('~/Documents/maptpx/R/topics.R')
topic_clus <- topics(gossling_ancients, K=2, tol=10, type="independent", signatures = signature_pos)
library(slam)
topic_clus <- topics(gossling_ancients, K=2, tol=10, type="independent", signatures = signature_pos)
save(topic_clus, "../processed_data/maptpx-runs/topic-clus-pooled-ancients-gosling-2-independent.rda")
save(topic_clus, file="../processed_data/maptpx-runs/topic-clus-pooled-ancients-gosling-2-independent.rda")
topic_clus$theta
dim(topic_clus$theta)
damageLogo_pos(topic_clus$theta)
par(new=TRUE)
damageLogo_pos(topic_clus$theta)
omega <- out$omega
labs <- rep("goss-ancient", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
omega <- topic_clus$omega
labs <- rep("goss-ancient", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
par(new=TRUE)
par(new=TRUE)
omega <- topic_clus$omega
labs <- rep("goss-ancient", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
par(new=TRUE)
omega <- topic_clus$omega
labs <- rep("goss-ancient", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
omega
popViewport()
library(grid)
popViewport()
par(new=TRUE)
omega <- topic_clus$omega
labs <- rep("goss-ancient", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
par(new=TRUE)
par(new=TRUE)
par(mfrow=c(1,1))
omega <- topic_clus$omega
labs <- rep("goss-ancient", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
par(new=TRUE)
par(mfrow=c(1,1))
omega <- topic_clus$omega
labs <- rep("goss-ancient", dim(omega)[1])
annotation <- data.frame(
sample_id = paste0("X", c(1:NROW(omega))),
tissue_label = factor(labs)
)
CountClust::StructureGGplot(omega = omega,
annotation = annotation,
palette = RColorBrewer::brewer.pal(8, "Accent"),
yaxis_label = "Moderns vs Ancients",
order_sample = FALSE,
figure_title = paste0("StructurePlot: K=", dim(omega)[2],""),
axis_tick = list(axis_ticks_length = .1,
axis_ticks_lwd_y = .1,
axis_ticks_lwd_x = .1,
axis_label_size = 7,
axis_label_face = "bold"))
